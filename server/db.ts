
/**
 * Configura√ß√£o do PostgreSQL otimizada para Replit e DigitalOcean
 * Solu√ß√£o espec√≠fica para problemas de conex√£o em diferentes ambientes
 */

import * as schema from '../shared/schema';
import ws from 'ws';
import pg from 'pg';
import { Pool as NeonPool, neonConfig } from '@neondatabase/serverless';
import { drizzle as drizzleNeon } from 'drizzle-orm/neon-serverless';
import { drizzle as drizzlePg } from 'drizzle-orm/node-postgres';

// Configura√ß√µes globais de ambiente
export const isProduction = process.env.NODE_ENV === 'production';
export const isReplit = process.env.REPL_ID !== undefined;
export const isLocalDev = !isProduction && !isReplit;

// Verificar conex√£o de banco de dados
if (!process.env.DATABASE_URL) {
  throw new Error('üö® ERRO CR√çTICO: DATABASE_URL n√£o est√° configurado! A aplica√ß√£o n√£o funcionar√° corretamente.');
}

// Log de in√≠cio da inicializa√ß√£o
console.log('======== INICIALIZA√á√ÉO DO BANCO DE DADOS ========');
console.log(`üåé Ambiente: ${isProduction ? 'PRODU√á√ÉO' : isReplit ? 'REPLIT' : 'DESENVOLVIMENTO LOCAL'}`);
console.log(`üîå URL do banco: ${process.env.DATABASE_URL.substring(0, 20)}...`);

// Declarar vari√°veis de conex√£o
let pool;
let db;

// Fun√ß√£o de inicializa√ß√£o com tratamento espec√≠fico por ambiente
function initializeConnection() {
  try {
    if (isReplit) {
      // ---- REPLIT: USE NEON COM WEBSOCKET SEM FALLBACK ----
      console.log('üîß REPLIT: Usando driver Neon com WebSocket');
      
      // Configura√ß√£o especial para o Replit
      neonConfig.webSocketConstructor = ws;
      process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0'; // Necess√°rio para SSL no Replit
      
      // Par√¢metros otimizados para Replit
      pool = new NeonPool({
        connectionString: process.env.DATABASE_URL,
        ssl: true,
        max: 3, // Conex√µes limitadas no Replit
        connectionTimeoutMillis: 10000,
        idleTimeoutMillis: 30000
      });
      
      // Criar inst√¢ncia do Drizzle para Replit
      console.log('üîÑ Criando inst√¢ncia Drizzle com driver Neon...');
      db = drizzleNeon(pool, { schema });
      console.log('‚úÖ Driver Neon inicializado com sucesso para Replit');
    }
    else if (isProduction) {
      // ---- PRODU√á√ÉO: USE PG PADR√ÉO COM SSL RELAXADO ----
      console.log('üîß PRODU√á√ÉO: Usando driver PostgreSQL padr√£o');
      
      // Produ√ß√£o precisa desabilitar verifica√ß√µes de SSL
      process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';
      
      // Pool otimizado para produ√ß√£o
      pool = new pg.Pool({
        connectionString: process.env.DATABASE_URL,
        ssl: {
          rejectUnauthorized: false,
          checkServerIdentity: () => undefined // Ignora verifica√ß√µes de identidade do servidor
        },
        max: 15, // Mais conex√µes para produ√ß√£o
        connectionTimeoutMillis: 5000,
        idleTimeoutMillis: 30000,
        statement_timeout: 30000,
        query_timeout: 30000,
        application_name: 'jogo-do-bicho-production'
      });
      
      // Criar inst√¢ncia do Drizzle para produ√ß√£o
      console.log('üîÑ Criando inst√¢ncia Drizzle com driver PostgreSQL...');
      db = drizzlePg(pool, { schema });
      console.log('‚úÖ Driver PostgreSQL inicializado com sucesso para produ√ß√£o');
    }
    else {
      // ---- DESENVOLVIMENTO LOCAL: TENTA AMBOS OS M√âTODOS ----
      console.log('üîß DEV LOCAL: Tentando driver PostgreSQL');
      
      // Primeiro tenta driver padr√£o PostgreSQL
      pool = new pg.Pool({
        connectionString: process.env.DATABASE_URL,
        ssl: false,
        max: 5,
        connectionTimeoutMillis: 5000,
        idleTimeoutMillis: 30000
      });
      
      // Criar inst√¢ncia do Drizzle para dev local
      console.log('üîÑ Criando inst√¢ncia Drizzle com driver PostgreSQL...');
      db = drizzlePg(pool, { schema });
      console.log('‚úÖ Driver PostgreSQL inicializado com sucesso para desenvolvimento local');
    }
    
    // Handler global de erro para o pool
    pool.on('error', (err) => {
      console.error('‚ö†Ô∏è Erro na conex√£o com o pool:', err.message);
      // N√£o encerrar o aplicativo, apenas log
    });
    
    // Retornar refer√™ncias
    return { pool, db };
  } 
  catch (error) {
    console.error('üî• ERRO FATAL na inicializa√ß√£o do banco:', error);
    
    // Prover uma implementa√ß√£o alternativa minimalista para que a aplica√ß√£o continue
    console.warn('‚ö†Ô∏è Usando implementa√ß√£o minimalista de emerg√™ncia. A funcionalidade ser√° limitada.');
    
    // Criar um pool m√≠nimo
    const minimalPool = {
      query: async () => { 
        console.warn('üö® Tentativa de acesso ao banco com conex√£o falha');
        return { rows: [] }; 
      },
      on: () => {},
      connect: async () => {
        throw new Error('Conex√£o com banco indispon√≠vel');
      }
    };
    
    // Criar uma inst√¢ncia minimalista de db
    const minimalDb = {
      select: () => ({ from: () => ({ where: () => [] }) }),
      insert: () => ({ values: () => ({ returning: () => [] }) }),
      update: () => ({ set: () => ({ where: () => ({ returning: () => [] }) }) }),
      delete: () => ({ where: () => ({ returning: () => [] }) }),
      execute: async () => []
    };
    
    return { 
      pool: minimalPool, 
      db: minimalDb 
    };
  }
}

// Inicializar ambos pool e db em uma √∫nica fun√ß√£o
const { pool: initializedPool, db: initializedDb } = initializeConnection();
pool = initializedPool;
db = initializedDb;

// Verificar conex√£o de forma ass√≠ncrona
setTimeout(async () => {
  try {
    console.log('üîç Verificando conex√£o com banco de dados...');
    const result = await pool.query('SELECT NOW() as time');
    
    if (result && result.rows && result.rows[0]) {
      console.log(`‚úÖ Banco de dados conectado e operacional √†s ${result.rows[0].time}`);
      console.log('======== BANCO DE DADOS INICIALIZADO ========');
    } else {
      console.error('‚ö†Ô∏è Conex√£o estabelecida, mas resposta inv√°lida:', result);
    }
  } catch (err) {
    console.error('‚ùå Erro na verifica√ß√£o final de conex√£o:', err.message);
    console.error('‚ö†Ô∏è A aplica√ß√£o continuar√°, mas funcionalidades de banco de dados podem falhar');
  }
}, 1000);

// Exportar as interfaces
export { pool, db };
